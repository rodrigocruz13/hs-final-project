#!/usr/bin/python3

import json
import re
import requests
import sys

now_stamp = __import__('os_functions').now_stamp


def get_link_list(fixed_url):
    """ 
    Purpose:   Gets all the valid and unique links from a fixed url.
    Arguments: - fixed_url (str): Web address used to find the links.
    Returns:   - unique_links (list): A list of unique links (str) of the URL.
    """

    print('URL:\t\t{}'.format(fixed_url))
    html_response = requests.get(fixed_url).text

    links_regex = re.compile('<a\s+.*href=[\'"]?([^\'" >]+)', re.IGNORECASE)
    original_links = links_regex.findall(html_response)
    original_links.sort()

    unique_links = []
    for link in original_links:
        full_url = re.sub(r'^\.?/{1,2}', fixed_url, link, count=1)

        cid = full_url.find('?cid')
        if (cid != -1):
            full_url = full_url[0:cid]

        disq = full_url.find('#disqus_thread')
        if (disq != -1):
            full_url = full_url[0:disq]

        java = full_url.find('javascript:void(0)')
        http = full_url.find('http')
        slug = full_url.find('{')
        qton = full_url.find('?')

        repeat = 1
        if (full_url not in unique_links):
            repeat = - 1

        if (java == -1 and http != -1 and slug == -1 and repeat == -1 and qton == -1 and disq == -1):
            unique_links.append(full_url)

    unique_links.sort()
    return(unique_links)


def check_all(link_list):
    """ 
    Purpose:   Checks the code status of each link.
    Arguments: - link_list (List): List with all the links from a web address.
    Returns:   - status_dict (Dict): Dict with info generated by checking process.
    """

    status_dict = {}
    list_len = len(link_list)
    print('Links found:\t{}'.format(list_len))

    codes_dict = load_dict_from_file('_status_codes')

    i = 0
    for link in link_list:
        try:
            code = requests.get(link).status_code
        except:
            sys.stdout.flush()

        class_code = codes_dict[str(int(code / 100))]
        explain_code = codes_dict[str(code)]

        status_dict_i = {}
        status_dict_i.update({"Code": str(code)})
        status_dict_i.update({"Type": class_code})
        status_dict_i.update({"Meaning": explain_code})

        check_dict_i = {}
        id = "Check" + ' ' + str(i + 1).zfill(3)
        check_dict_i.update({"Date": str(now_stamp())})
        check_dict_i.update({"Link": link})
        check_dict_i.update({"Status": status_dict_i})

        status_dict.setdefault(id, check_dict_i)
        i += 1
        print_progress_bar(i, list_len, 'Checking:')

    return(status_dict)


def print_errors(url, status_dict):
    """ 
    Purpose:   Save the resut dict in a JSON file and print the results.
    Arguments: - url (str): Url domain.
               - status_dict (Dict): Dict generated by the checking process.
    Returns:   - Nothing.
    """

    dict_lenght = len(status_dict)

    if (dict_lenght == 0 or status_dict == None):
        print('\nNo problems found')
        exit(1)

    semicolon = url.find(":") + 3
    basename = url[semicolon:-1]
    save_dict_to_file(status_dict, basename)
    print('\n')
    # print_board(status_dict)


def print_board(status_dict):
    """
    Purpose:   Print a board with the results.
    Arguments: - status_dict (Dict): Dict generated by the checking process.
    Returns:   - Nothing.
    """

    i = 0
    dash = '-' * 88
    for link, status in status_dict.items():
        if i == 0:
            print(dash)
            print('{:^8s}{:<125s}'.format('Status', ' Link'))
            print(dash)
        elif(status is not '200'):
            print('{:^8s}{:<125s}'.format(status, link))
        i += 1


def save_dict_to_file(dict, name):
    """
    Purpose:   Saves a "dict" into a JSON file with the "name" provided.
    Arguments: - Dict (Dict): Dict generated by the checking process.
    Returns:   - Nothing.
    """
    path = 'filestorage/'
    filename = path + name + '.json'
    f = open(filename, 'w')
    objects = json.dumps(dict, indent=4, skipkeys=True, sort_keys=True)
    f.write(objects)
    f.close()


def load_dict_from_file(name):
    """
    Purpose:   Gets a "dict" from a JSON file with the "name" provided.
    Arguments: - name (str): Name of the JSON file.
    Returns:   - dict (dict): dictionary object.
    """
    path = 'filestorage/'
    filename = path + name + '.json'
    f = open(filename, 'r')
    data = f.read()
    dict = json.loads(data)
    f.close()
    return (dict)


def print_progress_bar(count, total, status=''):
    """
    Purpose:   Prints a progress bar while checking the links.
    Arguments: - count (int): Counter of iterations.
               - total (int): Max number of iterations.
               - status (str): Text to be show while executing.
    Returns:   - Nothing.

    source: https://gist.github.com/vladignatyev/06860ec2040cb497f0f3
    Author: Vladimir Ignatyev
    """

    bar_len = 50
    filled_len = int(round(bar_len * count / float(total)))
    percents = round(100.0 * count / float(total), 1)
    mark = '■'
    bar = mark * filled_len + '∙' * (bar_len - filled_len)
    sys.stdout.write('%s\t[%s] %s%s\r' % (status, bar, percents, '%'))
    sys.stdout.flush()
